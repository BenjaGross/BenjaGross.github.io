---
layout: post
title: "About Using Jasmine"
date: 2015-12-19 13:24:25 -0500
comments: true
categories: testing, TDD, Gems
---

I have been working on a Backbone.js project for a few days now and while it has been great I came accross one very annoying issue. After getting my environment set up and a quick hello world out of the way I started to write a few Jasmine tests. I opened up the console and stared blankly for a few minutes and realized I didn't know how to run them. I had the proper source files and dependencies but just didn't know how to actually run my tests. 

After looking on google for a while I decided to refactor to use the [Jasmine Standalone release](https://github.com/jasmine/jasmine/releases) which I probably should have done to begin with but I guess I had on my Ruby colored glasses. 

I download the bundle and was able to pull the necessary files into my project directory, set up an `index.html` in my spec directory but when I began to require all the relevant scripts I decided I wanted a better way. I talked to some friends and was told that I should just use the [Jasmine Gem](https://github.com/jasmine/jasmine-gem). Since I had only used the gem with with Rails and I didn't think to use a gem for a strictly JavaScript project didn't even bother looking at the gem (which I already had). 

Using the Jasmine gem is extremely simple, just navigate to the root of your project and type these two commands: 

```bash
jasmine init
jasmine examples
```
If this is done properly you will get a notice saying "Jasmine has been installed" and instructions to run the server with the command `rake jasmine` and that you can run the automated CI tasks with PhantomJS by calling `rake jasmine::ci`.

More specifically `jasmine init` will add the following files and directories to your project. 

* `spec`, which contains `spec/javascripts` which holds
	* `helpers` an empty directory you will later use for helper files (`jasmine examples` will add one)
	* `support` holding `jasmine.yml` which will handle your requirements and `jasmine.helper.rb` where you can override and default configuration options like the port numbers  
* `rakefile` which by default will require the jasmine rake tasks for starting the testing server and more

`jasmine examples` will add more directories and files to your project that you can use as a boilerplate for building your own tests. It will install:

* `spec/helpers/jasmine_examples/spec_helper.js` a file you can use for setting up callbacks for your tests
* `spec/jasmine_examples/PlayerSpec.js` an example spec file for `Player` 
* `public`a directory contianing two JavaScript objects that are tested by `PlayerSpec.js`

Now, if you type `rake jasmine` and visit [http://localhost:8888/](http://localhost:8888/) (the default port for the python server you launch with `rake jasmine`) you will see the passing tests for PlayerSpec.js.

Now that we have some dummy tests running we can set up the requirements for dependencies in `jasmine.yml`. This file contains comments telling you where to require what and it already has everything you need to run the tests generated by `jasmine examples` however, if if you are using anything other than vanilla JavaScript like I was, you will need to manually require some dependencies. You can use wildecards and regex to require specific groups of files in directories (e.g. `js/**/*.js` will require in all javascript files in all child directories directly nested under a `js` directory) however this may not load files in the order that you need so it will still be necessary to require certain files manually. For example, if you are using backbone `lib/underscore.js` will need to be required before `lib/backbone.js` manually even if you have `lib/*.js` the `src_files` section of `jasmine.yml`.

If you are having trouble figuring out what might be missing you can manually check by running the server (`rake jasmine`) and opening the console to see what isn't being loaded properly.

This is not the most difficult thing in the world, and frankly, if you are using anything like yeoman or are adept at bower you will probably not need this, but if you want to bring some jasmine tests into a small application without much overhead I found this to be a great solution. 